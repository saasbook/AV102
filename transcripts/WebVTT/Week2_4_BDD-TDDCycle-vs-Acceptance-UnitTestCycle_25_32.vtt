WEBVTT

0
00:00:00.110 --> 00:00:03.899
Hey, so I want to talk to you about the BDD TDD cycle

1
00:00:03.899 --> 00:00:07.799
versus, or is it the same as the acceptance/unit test cycle.

2
00:00:07.799 --> 00:00:11.389
Two key concepts that are related in strange curious ways

3
00:00:11.389 --> 00:00:14.790
let's talk first about BDD and TDD.

4
00:00:14.790 --> 00:00:17.859
Now as you probably know BDD stands for Behaviour

5
00:00:17.859 --> 00:00:20.939
Driven Development and TDD stands the Test Driven Development

6
00:00:20.939 --> 00:00:25.400
I think there's often confusion about what these are and the difference between them

7
00:00:25.400 --> 00:00:29.980
I see them - I personally see them - as pretty much the same thing

8
00:00:29.980 --> 00:00:33.910
... I would argue that maybe TDD is the bigger set

9
00:00:33.910 --> 00:00:37.510
... and you know BDD is kinda a subset

10
00:00:37.510 --> 00:00:42.250
of TDD ... the key thing you know and ... I'm not the

11
00:00:42.250 --> 00:00:46.320
Oracle on this but seems to me that in order for something to be behaviour driven development

12
00:00:46.320 --> 00:00:50.210
you need to have a higher-level description of the expected behaviour

13
00:00:50.210 --> 00:00:53.710
you need to have something that's that's ... comprehensible

14
00:00:53.710 --> 00:00:57.050
to someone who doesn't know your code ... inside and out

15
00:00:57.050 --> 00:01:02.260
... and so I mean I think the term Behaviour Driven Development was developed by the

16
00:01:02.260 --> 00:01:02.940
people who

17
00:01:02.940 --> 00:01:06.770
developed RSpec and Cucumber ... I think although that JBehave was the

18
00:01:06.770 --> 00:01:07.350
original

19
00:01:07.350 --> 00:01:10.350
precursor and I think the idea was to move away from the

20
00:01:11.100 --> 00:01:15.580
... the test, ... I mean it's still you know Behaviour Driven Development still has this same sort of

21
00:01:15.580 --> 00:01:16.369
flow

22
00:01:16.369 --> 00:01:19.549
in that you know describe a behavior that you don't yet have

23
00:01:19.549 --> 00:01:23.060
implement that behaviour ... you know â€¦ see that - you know -

24
00:01:23.060 --> 00:01:26.259
... that that's ... there's that in place

25
00:01:26.259 --> 00:01:29.720
with the, ... it sorta, ... to test - Test Driven Development

26
00:01:29.720 --> 00:01:32.820
is that same flow but the Behaviour Driven Development y'know, it says, right -

27
00:01:32.820 --> 00:01:36.119
we can't just specify low-level tests we have to

28
00:01:36.119 --> 00:01:39.720
specify the high-level behavior and so some tools in fact both

29
00:01:39.720 --> 00:01:43.930
RSpec and Cucumber ... by their creators are suggested to be

30
00:01:43.930 --> 00:01:47.329
BDD tools because they can describe things

31
00:01:47.329 --> 00:01:50.350
at that, ... sort of a higher-level

32
00:01:50.350 --> 00:01:53.689
now there's maybe some confusion that arises from this in the course

33
00:01:53.689 --> 00:01:56.930
in that the 169 Engineering Software-as-a-Service course

34
00:01:56.930 --> 00:02:01.290
because we we ... breakup certain homeworks as we talk about the BDD

35
00:02:01.290 --> 00:02:06.250
TDD cycle ... we have a homework which involves writing cucumber stories which

36
00:02:06.250 --> 00:02:06.610
is

37
00:02:06.610 --> 00:02:10.360
labelled a BDD homework we have ... the following

38
00:02:10.360 --> 00:02:13.810
homework which is called BDD/TDD cycle which involves doing

39
00:02:13.810 --> 00:02:17.849
both Cucumber and RSpec and I think one can come away with the impression that

40
00:02:17.849 --> 00:02:18.300
somehow

41
00:02:18.300 --> 00:02:22.129
"right ... oh yes cucumber is BDD RSpec is TDD"

42
00:02:22.129 --> 00:02:26.220
that's what that's what happens ... and there are diagrams

43
00:02:26.220 --> 00:02:29.500
that support this the you know and

44
00:02:29.500 --> 00:02:32.650
you know I think the ... this concept is is around

45
00:02:32.650 --> 00:02:36.360
so frequently that we can't kind of ignore it ... I feel

46
00:02:36.360 --> 00:02:41.110
that it maybe ... I dunno it's not the most accurate way of

47
00:02:41.110 --> 00:02:46.220
representing this. Whatever we call it, this process of having

48
00:02:46.220 --> 00:02:50.510
... am higher-level feature tests and lower-level, shall we call them, unit tests

49
00:02:50.510 --> 00:02:53.910
... and sort of swapping from one to the other and going backwards and forwards

50
00:02:53.910 --> 00:02:56.920
is extraordinarily powerful ...

51
00:02:56.920 --> 00:03:00.129
in in some ways I don't get too wrapped up in the debate about what the

52
00:03:00.129 --> 00:03:04.110
terminology, y'know how we describe it ... I think this

53
00:03:04.110 --> 00:03:07.220
process with your centralized team of a distributed team

54
00:03:07.220 --> 00:03:11.400
... you know even in your individual you know just this process of working

55
00:03:11.400 --> 00:03:15.280
fundamentally can massively improve the quality of the software

56
00:03:15.280 --> 00:03:20.040
that you that you generate.  It's - it's not a - a magical elixir, but its - it really

57
00:03:20.040 --> 00:03:23.849
really really can be a huge help and

58
00:03:23.849 --> 00:03:27.909
you know we we're seeing that all the time in the y'know distributed teams

59
00:03:27.909 --> 00:03:31.670
working on AgileVentures but just to go through you know as it's described in the

60
00:03:31.670 --> 00:03:33.349
terms of BDD/TDD

61
00:03:33.349 --> 00:03:36.980
the idea is that you would start by having a failing feature test

62
00:03:36.980 --> 00:03:40.780
... there we've got the red arrows representing that so you got we've described sort of the high-

63
00:03:40.780 --> 00:03:43.209
level feature, the high-level behaviour that we want our software to have,

64
00:03:43.209 --> 00:03:47.030
it doesn't have it. We would then rather than immediately making

65
00:03:47.030 --> 00:03:50.760
that ... pass we would drop down to a low level and we would write

66
00:03:50.760 --> 00:03:55.459
a lower-level test ... that would also also be you know it was described here as

67
00:03:55.459 --> 00:03:57.239
writing a failing test, a unit test

68
00:03:57.239 --> 00:04:00.310
we see that fail.  So then we're in this thing we have like two levels of red

69
00:04:00.310 --> 00:04:01.909
above us; we've got a failing feature test

70
00:04:01.909 --> 00:04:06.000
and then a failing unit test and then we will actually implement the code that we wish

71
00:04:06.000 --> 00:04:06.409
we

72
00:04:06.409 --> 00:04:10.110
we had and make that lower level test pass.

73
00:04:10.110 --> 00:04:14.099
We would then refactor as we've ... heard talked about in the main course many

74
00:04:14.099 --> 00:04:14.560
times

75
00:04:14.560 --> 00:04:17.940
... and then ... ideally what will happen

76
00:04:17.940 --> 00:04:21.989
is that as a consequence the ... high-level features test, because we've,

77
00:04:21.989 --> 00:04:25.350
of course, done all our unit tests correctly, the high-level feature test ...

78
00:04:25.350 --> 00:04:29.250
will will also pass ... of course there may be

79
00:04:29.250 --> 00:04:32.370
you know it may be that ... for the high-level feature relying upon

80
00:04:32.370 --> 00:04:36.440
several you know different individual unit tests that they might be

81
00:04:36.440 --> 00:04:39.610
several several cycles there but ... and

82
00:04:39.610 --> 00:04:44.370
well ... One: this is like I would say one the most powerful concepts

83
00:04:44.370 --> 00:04:48.300
from from the course and in software engineering and I'm a big fan

84
00:04:48.300 --> 00:04:52.350
... however I do worry about people calling it BDD/TDD cycle

85
00:04:52.350 --> 00:04:55.960
... I prefer to call it acceptance test

86
00:04:55.960 --> 00:05:00.000
unit test, or acceptance/unit test cycle let's talk about what we mean by acceptance

87
00:05:00.000 --> 00:05:01.300
integration and unit tests

88
00:05:01.300 --> 00:05:04.940
... particularly when I talk about these tests acceptance tests

89
00:05:04.940 --> 00:05:08.229
coming from sort of an extreme programming background I'm talking about

90
00:05:08.229 --> 00:05:11.940
just checking the entire stack, checking that there's the function you know all

91
00:05:11.940 --> 00:05:13.889
of the functionality its present

92
00:05:13.889 --> 00:05:17.580
I think depending upon where you're coming from that might be called system testing

93
00:05:17.580 --> 00:05:20.180
and acceptance testing is when you actually put something in front of the

94
00:05:20.180 --> 00:05:21.009
customer

95
00:05:21.009 --> 00:05:25.350
... you know that ... I think again all of these terms

96
00:05:25.350 --> 00:05:28.660
they're they're though the actual words; they're guides

97
00:05:28.660 --> 00:05:32.000
like I think to get too hung up on what exactly

98
00:05:32.000 --> 00:05:35.380
these things mean is to is to miss the wood for the trees ...

99
00:05:35.380 --> 00:05:38.639
you know wikipedia has a good article on all the different types of software testing

100
00:05:38.639 --> 00:05:42.169
you know that's a - that's a - that's a great read ... but I I think

101
00:05:42.169 --> 00:05:45.570
here what I want to do is try and ... focus on this -

102
00:05:45.570 --> 00:05:48.740
this process and not get confused about ... you know

103
00:05:48.740 --> 00:05:53.139
which tools go - go in where. Anyway listen - that's acceptance tests

104
00:05:53.139 --> 00:05:55.650
which are kind of the higher level-tests and they are checking that things are really working

105
00:05:55.650 --> 00:05:57.680
almost like from the perspective of the customer

106
00:05:57.680 --> 00:06:01.190
.... then you ... sort of at a lower level down you have integration tests

107
00:06:01.190 --> 00:06:05.090
that will be checking that ... a couple of different components in your system

108
00:06:05.090 --> 00:06:09.240
are working well together and then unit tests being y'know single unit; that's checking

109
00:06:09.240 --> 00:06:09.940
a single component

110
00:06:09.940 --> 00:06:13.470
of your system and that give's us a diagram like this; there are many diagrams

111
00:06:13.470 --> 00:06:18.050
out there ... I don't know that any of them are yet perfect we're still in search of ...

112
00:06:18.050 --> 00:06:21.180
perhaps we will one day draw the perfect diagram, but

113
00:06:21.180 --> 00:06:24.270
... you know I think rather than the

114
00:06:24.270 --> 00:06:27.330
BDD/TDD, I think calling the top level

115
00:06:27.330 --> 00:06:31.060
cycle of red/green/refactor the acceptance test cycle and the

116
00:06:31.060 --> 00:06:34.960
smaller lower-level ... things the unit test cycles

117
00:06:35.639 --> 00:06:39.580
they is is is better because the problem is that some people

118
00:06:39.580 --> 00:06:44.190
... use RSpec to write their ... high-level feature tests

119
00:06:44.190 --> 00:06:47.509
and ... you know although in the

120
00:06:47.509 --> 00:06:51.770
... Engineering Software-as-a-Service course we've used cucumber

121
00:06:51.770 --> 00:06:56.490
for ... the behaviour ... sorry for the feature tests.  I'm getting confused myself!

122
00:06:56.490 --> 00:06:59.490
we've used ... Cucumber for the high level and ...

123
00:07:00.030 --> 00:07:03.370
RSpec for the for the lower-level ... you don't have to do it that way round

124
00:07:03.370 --> 00:07:06.830
I mean that you can argue that they lend themselves to those different levels

125
00:07:06.830 --> 00:07:10.160
but it's not it's not required and so

126
00:07:10.160 --> 00:07:13.380
... I think all this BDD/TDD is missing

127
00:07:13.380 --> 00:07:17.419
the key point which is that you're you're ... whether you're using

128
00:07:17.419 --> 00:07:21.110
... Cucumber or RSpec or even you're writing your own hand rolled framework

129
00:07:21.110 --> 00:07:24.340
the key thing is that you have a high-level focus the you're

130
00:07:24.340 --> 00:07:29.750
somehow attached to some ... user story or business value

131
00:07:29.750 --> 00:07:33.349
right.  And that there's some of ... you've got some sort of failing test

132
00:07:33.349 --> 00:07:36.410
that represents that. Whether you're calling that you know

133
00:07:36.410 --> 00:07:39.979
your feature test or you're calling it your acceptance test ... doesn't really matter

134
00:07:39.979 --> 00:07:41.240
but the key thing is that you have that

135
00:07:41.240 --> 00:07:44.449
and that that's your high level focus and

136
00:07:44.449 --> 00:07:47.490
that you're then you know not relying solely on that but you're also

137
00:07:48.150 --> 00:07:51.479
... testing the little components and the interfaces between them because your

138
00:07:51.479 --> 00:07:53.229
high level tests will tend to run

139
00:07:53.229 --> 00:07:56.349
rather slow and you can get ... you know

140
00:07:56.349 --> 00:08:00.419
... it will tend to run rather slow and it may rely upon a whole cascade

141
00:08:00.419 --> 00:08:04.300
of things and it's difficult to write tests for all of the different possible ways ...

142
00:08:04.300 --> 00:08:07.979
the pathways through that. That's where your smaller y'know unit tests they allow

143
00:08:07.979 --> 00:08:10.410
you to to focus on on a low level thing

144
00:08:10.410 --> 00:08:14.120
but whenever you're working on a on your test you should be able to say what your

145
00:08:14.120 --> 00:08:16.699
high level acceptance test is and often

146
00:08:16.699 --> 00:08:19.810
people are asking me for help online; they're saying I've got this little tiny problem

147
00:08:19.810 --> 00:08:21.539
here and it's stuck or it's not doing this thing

148
00:08:21.539 --> 00:08:25.440
and I - the first thing I say is - the first thing I say is, actually, what I say is

149
00:08:25.440 --> 00:08:29.110
you know â€¦ what's the ... what's the chore or story that you're working on in the

150
00:08:29.110 --> 00:08:30.990
bigger picture of the project, 'cause I want to understand that

151
00:08:30.990 --> 00:08:34.339
and then I say right okay what's the acceptance test issue and then what's the unit test

152
00:08:34.339 --> 00:08:34.640
issue

153
00:08:34.640 --> 00:08:37.810
and the final we'll ... finally we'll look at whatever comes up

154
00:08:37.810 --> 00:08:41.550
in the actual application code ... so this this is a pretty good diagram I

155
00:08:41.550 --> 00:08:42.250
think

156
00:08:42.250 --> 00:08:46.330
... it doesn't really show the flow from you know okay you've got an acceptance test cycle and its

157
00:08:46.330 --> 00:08:47.839
you've got unit test cycles

158
00:08:47.839 --> 00:08:50.899
embedded within it. It doesn't show about the

159
00:08:50.899 --> 00:08:54.180
flow in quite the way that I wanted. This is another good - good

160
00:08:54.180 --> 00:08:57.680
... diagram although because the arrows are not numbered

161
00:08:57.680 --> 00:09:01.399
I think it can be ... somewhat confusing I think the way that its supposed to be

162
00:09:01.399 --> 00:09:03.120
read is that you so start here

163
00:09:03.120 --> 00:09:06.120
and ... on the top level here we've what you know top

164
00:09:06.670 --> 00:09:10.830
circle or the outer circle with the acceptance test and you would initially have

165
00:09:10.830 --> 00:09:14.649
a an acceptance test going red which might be in Cucumber, might be in RSpec but anyway

166
00:09:14.649 --> 00:09:17.990
... you have that going red and then you would drop ... the first thing you do is you

167
00:09:17.990 --> 00:09:19.010
drop down here. Now

168
00:09:19.010 --> 00:09:22.290
failing acceptance test means it's now time to ...

169
00:09:22.290 --> 00:09:26.209
have a failing unit test which you then make it pass and then you refactor

170
00:09:26.209 --> 00:09:29.730
and then once you've got you know some number of unit tests

171
00:09:29.730 --> 00:09:33.050
... passing sufficiently so who you think you've got all the ones that are part of this high-level

172
00:09:33.050 --> 00:09:33.790
feature

173
00:09:33.790 --> 00:09:37.459
you would then jump back out and hopefully see your high level acceptance test

174
00:09:37.459 --> 00:09:40.209
pass and then you might do some refactoring there so this is this is a pretty

175
00:09:40.209 --> 00:09:40.760
good diagram

176
00:09:40.760 --> 00:09:44.380
I like this one I just yeah it needs numbers and an explanation to go with it

177
00:09:44.380 --> 00:09:48.019
but this I believe is based upon what I would almost call the missing manual

178
00:09:48.019 --> 00:09:49.089
y'know I think this

179
00:09:49.089 --> 00:09:52.490
RSpec book ... which is all about RSpec and Cucumber

180
00:09:52.490 --> 00:09:56.760
and friends is just excellent I couldn't I can't recommend it enough

181
00:09:56.760 --> 00:09:59.950
... I think it's an excellent ... addition to the

182
00:10:00.630 --> 00:10:03.959
Engineering Software-as-a-Service textbook ... a lot of the material

183
00:10:03.959 --> 00:10:08.190
from the RSpec book is in I think it's all there if you look it's it's all there

184
00:10:08.190 --> 00:10:11.519
the ... this is I think such an important topic

185
00:10:11.519 --> 00:10:14.839
that you know ... the way that it is presented

186
00:10:14.839 --> 00:10:18.709
independently of Rails and you know software as a service and so on

187
00:10:18.709 --> 00:10:21.930
... it's it's it's it's really really handy ...

188
00:10:21.930 --> 00:10:25.370
but so that ... previous diagram - that comes from a diagram

189
00:10:25.370 --> 00:10:28.779
from the the RSpec

190
00:10:28.779 --> 00:10:33.399
... RSpec book which ... is the same, it doesn't have the colours but it does have the numbers so you can see

191
00:10:33.399 --> 00:10:37.660
... this process here. It's a little bit of ... and it is the same thing

192
00:10:37.660 --> 00:10:41.089
again but it's also got that if we look at it in

193
00:10:41.089 --> 00:10:44.120
in text there ... so the and

194
00:10:44.120 --> 00:10:48.170
... in the RSpec book as in the ... the ESaaS

195
00:10:48.170 --> 00:10:52.790
course it ... the suggestion is to start to use Cucumber as your higher-level testing

196
00:10:52.790 --> 00:10:53.279
tool

197
00:10:53.279 --> 00:10:56.079
... that's for features for acceptance tests and you know you you

198
00:10:56.079 --> 00:10:57.440
focus on one scenario

199
00:10:57.440 --> 00:11:00.700
you write a failing step definition. You drop down to,

200
00:11:00.700 --> 00:11:04.050
you know, having done that you then drop down to RSpec you

201
00:11:04.050 --> 00:11:07.180
write a failing example to get the example to pass. You refactor

202
00:11:07.180 --> 00:11:10.310
and then you know go around around around and there's lots of excellent

203
00:11:10.310 --> 00:11:13.529
... examples in the in the RSpec

204
00:11:13.529 --> 00:11:18.070
book and you know I think the the challenge in some ways that we have with

205
00:11:18.070 --> 00:11:20.040
the bigger ESaaS course with the

206
00:11:20.040 --> 00:11:23.100
Rails and everything else that is being presented; it's

207
00:11:23.100 --> 00:11:26.450
almost not until part 2 of the course that you actually get to practice

208
00:11:27.160 --> 00:11:31.660
... this - this process ... and I was wondering I think I might just do

209
00:11:32.250 --> 00:11:37.029
a little sort of concrete example of that on the command line; we'll see if and if this a

210
00:11:37.029 --> 00:11:40.029
blows up in my face but if we wanna have ... just a simple

211
00:11:40.540 --> 00:11:43.560
let's see.  First I wanna do, so this is going to be I'm going to call this

212
00:11:43.560 --> 00:11:47.410
`acceptance_unit` 'cause I wanna move away from BDD/TDD

213
00:11:47.959 --> 00:11:51.300
let's go inside there and what I could possibly do is I could do

214
00:11:51.899 --> 00:11:55.630
a features directory which we would ... need for Cucumber

215
00:11:55.630 --> 00:11:58.910
and then I could do something like ... nano

216
00:11:59.519 --> 00:12:02.889
features ... now and I'm going to sort of adapt

217
00:12:02.889 --> 00:12:06.110
... an example from the beginning of the RSpec

218
00:12:06.750 --> 00:12:10.010
book here we'll call this ...

219
00:12:10.010 --> 00:12:13.029
let's call this the greeter feature

220
00:12:13.760 --> 00:12:17.230
... like so, there we go

221
00:12:17.230 --> 00:12:20.240
and so we'll have a feature here that says

222
00:12:20.240 --> 00:12:23.269
Greeter says hello

223
00:12:23.269 --> 00:12:26.269
and ideally this would be a great place to put in our user story ...

224
00:12:26.820 --> 00:12:30.279
but I won't do that right now ... just for brevity

225
00:12:30.899 --> 00:12:34.070
let's ... have this greeter says ...

226
00:12:34.070 --> 00:12:37.670
hello and this is also to show that ... something that

227
00:12:37.670 --> 00:12:41.380
if you haven't used Cucumber outside of the ESaaS Engineering course then

228
00:12:42.779 --> 00:12:47.209
... it's ... you know interesting to see Cucumber used not for Rails

229
00:12:47.209 --> 00:12:51.100
... and it really is you can in principle be writing

230
00:12:51.100 --> 00:12:54.820
Unit tests if you wanted to in Cucumber I guess I should also mention is that

231
00:12:55.420 --> 00:13:00.529
I think ... religiously sticking to process of the acceptance test and unit test cycle

232
00:13:00.529 --> 00:13:04.000
is absolutely critical for managing software in coming from from distributed

233
00:13:04.000 --> 00:13:04.510
teams

234
00:13:04.510 --> 00:13:08.240
... just ... if you're trying to incorporate lots of things that people have

235
00:13:08.240 --> 00:13:08.860
done

236
00:13:08.860 --> 00:13:12.290
independently and they haven't been meeting as they can do in a in a single office

237
00:13:12.290 --> 00:13:16.209
then getting everybody to sort of follow this you know red Cucumber red RSpec

238
00:13:16.209 --> 00:13:17.240
or should I say

239
00:13:17.240 --> 00:13:20.790
red acceptance red ... red unit test

240
00:13:20.790 --> 00:13:24.709
ah, gosh you know you it there's all sorts of

241
00:13:24.709 --> 00:13:27.820
 levels; levels within levels. So let's do something so then given a Greeter ...

242
00:13:28.769 --> 00:13:32.190
let's get in ...let's do ...

243
00:13:32.190 --> 00:13:35.730
its when I send a greet message

244
00:13:36.459 --> 00:13:40.079
... then I should see

245
00:13:40.810 --> 00:13:44.680
"hello" like so and we'll do save, then out

246
00:13:44.680 --> 00:13:48.029
and we'll run 'cucumber' there and

247
00:13:48.029 --> 00:13:51.690
yeah so you know you're familiar with ... Cucumber

248
00:13:51.690 --> 00:13:56.089
... they we go this is it just running by itself and this is what's lovely about the RSpec

249
00:13:56.089 --> 00:13:56.519
book

250
00:13:56.519 --> 00:13:59.690
is its got a whole series of examples where you're

251
00:13:59.690 --> 00:14:02.699
just working with Cucumber and RSpec and it gives you a much ...

252
00:14:02.699 --> 00:14:06.519
I think ... a wonderful ... insight into all these things

253
00:14:06.519 --> 00:14:10.470
I think we then need to have - don't we - it usually goes inside the ...

254
00:14:11.649 --> 00:14:14.760
step definitions ... trying to sort of do it

255
00:14:14.760 --> 00:14:17.810
â€¦ these step definitions again need to go

256
00:14:17.810 --> 00:14:22.600
into a - so oh yes - can I just do it, we can do â€¦ nano features ...

257
00:14:23.870 --> 00:14:26.889
step definitions, I might have to create that

258
00:14:26.889 --> 00:14:30.310
step_definitions ... greeter

259
00:14:30.310 --> 00:14:33.540
steps it may complain now that I don't have the ...

260
00:14:33.540 --> 00:14:37.000
no it's done, alright that's good so let's ... pop those in there

261
00:14:37.579 --> 00:14:40.959
... so y'know we're starting off with our Cucumber we need to get that,

262
00:14:40.959 --> 00:14:44.269
we need to ... implement those

263
00:14:44.269 --> 00:14:47.360
let ... go in here

264
00:14:47.360 --> 00:14:50.380
and say that so given that we have a

265
00:14:50.380 --> 00:14:53.579
greeter to let's make ... let's make a a

266
00:14:53.579 --> 00:14:56.800
greeter ... and just call it greeter new

267
00:14:57.570 --> 00:15:00.860
like so. And then when I send it a greet message

268
00:15:00.860 --> 00:15:04.870
so ... let's ... get rid of that there and ...

269
00:15:05.579 --> 00:15:09.050
do, ... so let's have a message let's that

270
00:15:09.050 --> 00:15:12.310
do that - two at symbols there; message is equal to

271
00:15:12.310 --> 00:15:15.310
at greeter dot greet like so

272
00:15:15.870 --> 00:15:18.870
and then finally we get down to here it then I should see

273
00:15:19.389 --> 00:15:22.389
we'll get rid of the stuff in there

274
00:15:23.120 --> 00:15:26.230
and say message

275
00:15:26.230 --> 00:15:29.279
should equal

276
00:15:29.279 --> 00:15:33.079
there we go; so this is we're actually

277
00:15:33.079 --> 00:15:36.079
using RSpec syntax in there

278
00:15:36.639 --> 00:15:39.730
greeting and we need to call this

279
00:15:39.730 --> 00:15:43.149
here greeting okay so control X and

280
00:15:43.149 --> 00:15:46.149
save my file no, yes!  Ah, and are you going

281
00:15:46.920 --> 00:15:51.959
to now filename to write? Ah okay so I'm maybe just going to need to go in here and quickly

282
00:15:52.509 --> 00:15:55.509
cd ...

283
00:15:55.509 --> 00:15:58.880
documents cd GitHub cd, we've

284
00:15:58.880 --> 00:16:02.550
called this acceptance underscore units, cd

285
00:16:02.550 --> 00:16:05.550
features and then we just need to create step

286
00:16:06.149 --> 00:16:09.350
definitions, naughty nano, step

287
00:16:09.350 --> 00:16:12.360
def-i-ni-tions like so

288
00:16:12.360 --> 00:16:15.759
... try again right .. there we go

289
00:16:15.759 --> 00:16:20.389
saved that out.  Okay, so now if we run Cucumber ... we should get some different kinds of errors, we'll get some

290
00:16:20.389 --> 00:16:23.850
some running things so we've got an uninitialized constant greeter

291
00:16:23.850 --> 00:16:26.980
... there so what we need to do is get our ...

292
00:16:27.680 --> 00:16:30.690
greeter into ... a Cucumber

293
00:16:32.610 --> 00:16:36.019
and so then we get a basic error and I think actually it's great to go through

294
00:16:36.579 --> 00:16:40.220
these sorts of errors here. We've got like unitialized constant greeter

295
00:16:40.220 --> 00:16:43.949
so, you know, our Cucumber feature you know is referring to something called a greeter that it doesn't know anything about

296
00:16:43.949 --> 00:16:47.699
... simple solution to that here is that we go into

297
00:16:47.699 --> 00:16:50.820
our step definitions and looks at our greeter steps

298
00:16:51.370 --> 00:16:54.370
we need to have some sort of ...

299
00:16:55.589 --> 00:16:58.680
reference to a greeter ... if

300
00:16:58.680 --> 00:17:02.860
we get out of there ... that's still not gonna ... fix things for us

301
00:17:02.860 --> 00:17:05.890
because we haven't got it's now going to require

302
00:17:05.890 --> 00:17:09.079
a greeter; there's no such file ... following standard ...

303
00:17:09.770 --> 00:17:13.020
Ruby practices we want to put ... something called

304
00:17:13.020 --> 00:17:17.309
greeter dot rb in in there and we'll want to

305
00:17:17.309 --> 00:17:20.709
... I was going to

306
00:17:20.709 --> 00:17:24.100
not there you go and just creates a sort of default

307
00:17:24.100 --> 00:17:27.169
greeter plus we could have dropped down with the ... there's a sort of

308
00:17:27.169 --> 00:17:30.850
judgement call about the point at which you drop down to the lower-level unit

309
00:17:30.850 --> 00:17:32.480
test but I think I just want to get -

310
00:17:32.480 --> 00:17:36.309
you know, I know I need this infrastructure in place so if we now run

311
00:17:36.309 --> 00:17:39.580
... Cucumber there ... increase the size of this a bit

312
00:17:39.580 --> 00:17:42.940
we can see that ... we're now actually passing

313
00:17:42.940 --> 00:17:46.010
the first step there ... which is ...

314
00:17:46.010 --> 00:17:49.720
you know ... I've kinda cheated there a little bit ... to just go in and get us

315
00:17:49.720 --> 00:17:50.460
something

316
00:17:50.460 --> 00:17:54.010
... you know as a sort of a simpler, simpler error message but for now

317
00:17:54.010 --> 00:17:57.380
on the second step we're getting undefined method greet so

318
00:17:57.380 --> 00:18:00.400
we've got that but so we could of course carry-on and drive this

319
00:18:00.400 --> 00:18:03.809
all the way through with with Cucumber and that's something that ...

320
00:18:03.809 --> 00:18:08.260
is - is very very tempting to do and this, you know, developing this intuition about when you drop

321
00:18:08.260 --> 00:18:09.169
from

322
00:18:09.169 --> 00:18:12.690
acceptance test to unit test is is kind of I think critical

323
00:18:12.690 --> 00:18:16.470
for working ... on your code and producing reliable code which is then really

324
00:18:16.470 --> 00:18:17.160
important for the -

325
00:18:17.160 --> 00:18:20.160
for the entire - for the entire team but so we can ...

326
00:18:21.160 --> 00:18:24.630
... go; we can say like me maybe at this point I mean

327
00:18:24.630 --> 00:18:28.549
we want to imagine you know all the functionality here is relatively relatively simple

328
00:18:28.549 --> 00:18:32.580
you know we've just ... described it in in in nice language

329
00:18:32.580 --> 00:18:35.630
what we want to do now ... is get set up with ...

330
00:18:37.020 --> 00:18:40.840
... with some specs for our unit tests

331
00:18:40.840 --> 00:18:44.470
so what I'm going to do here is if we make a spec directory

332
00:18:44.990 --> 00:18:49.380
and we can run ... RSpec from the command line here and there's no examples at the moment

333
00:18:49.380 --> 00:18:52.190
so if we go in and say ... nano

334
00:18:52.190 --> 00:18:55.970
oh let's go, we're going to do spec and then do a greeter spec

335
00:18:55.970 --> 00:18:59.080
... like so and then

336
00:18:59.080 --> 00:19:02.929
... we can do something simple in here like we can describe well we'll probably need to

337
00:19:02.929 --> 00:19:03.759
require

338
00:19:03.759 --> 00:19:07.340
the greeter ... like this ...

339
00:19:07.919 --> 00:19:10.950
and then we'll need to do you describe

340
00:19:10.950 --> 00:19:14.070
... this greeter and say

341
00:19:14.639 --> 00:19:18.269
... you know ... what shall we say? It's

342
00:19:18.269 --> 00:19:21.559
... oh the interesting thing here is that as a unit test

343
00:19:21.559 --> 00:19:25.230
rather than worrying about the high-level feature a bit sort of responding with

344
00:19:25.230 --> 00:19:25.960
with the message

345
00:19:25.960 --> 00:19:28.990
... you know it should respond

346
00:19:28.990 --> 00:19:33.509
... to ... I think greeting I forget now what the error

347
00:19:33.509 --> 00:19:36.509
was but let's - let's ... do that and

348
00:19:37.090 --> 00:19:40.090
end and then I think we're got something like

349
00:19:40.090 --> 00:19:43.340
the order of ... we've got ...

350
00:19:43.340 --> 00:19:47.250
if we do greeter new

351
00:19:47.909 --> 00:19:51.120
should respond to

352
00:19:51.720 --> 00:19:55.299
and then ...greet. I forget if that was the right thing, well let's save that out

353
00:19:55.299 --> 00:20:00.110
and was it was yes undefined method greet. so now let's run the RSpec there

354
00:20:00.110 --> 00:20:03.990
and there we go; so expected Greeter to respond to greet

355
00:20:03.990 --> 00:20:07.809
and it didn't ... so this is ... you can sort of see in this very trivial example that

356
00:20:08.330 --> 00:20:11.470
we've got here if we go and look back at the ...

357
00:20:11.470 --> 00:20:14.840
Cucumber example we've got here in the greeter feature

358
00:20:14.840 --> 00:20:18.059
we've we've just described at the high level ...

359
00:20:18.059 --> 00:20:21.440
you know ... given a greeter when I send the greet message

360
00:20:21.440 --> 00:20:25.289
then I should see hello.  We're sort of describing behaviour at a higher-level.  We're kind of almost

361
00:20:25.289 --> 00:20:26.659
doing kinda a bit of a

362
00:20:26.659 --> 00:20:30.399
imperative thing here where we could sort of you know do fewer steps

363
00:20:30.399 --> 00:20:33.950
...  here that's another - another debate to get into.

364
00:20:33.950 --> 00:20:37.889
but the key thing is about that we start with a higher-level description

365
00:20:37.889 --> 00:20:41.450
you know potentially ... in a more human readable form ...

366
00:20:41.450 --> 00:20:45.230
the ... you know that that's that's that's really important and then you know

367
00:20:45.230 --> 00:20:49.139
at certain points we - we stop and we go down to the unit tests and the more simple

368
00:20:49.139 --> 00:20:50.019
things like we've got

369
00:20:50.019 --> 00:20:53.460
here we've got the spec and we've got the greeter spec and so now this is

370
00:20:53.460 --> 00:20:57.669
this is arguably still you know more more human-readable in terms of the RSpec

371
00:20:57.669 --> 00:20:59.610
greeter you should respond to to to greet. I wonder in fact if

372
00:20:59.610 --> 00:21:03.590
I can get away ... with that just being ...

373
00:21:03.590 --> 00:21:08.409
greeter I think probably if we had greeter should respond to greet

374
00:21:08.409 --> 00:21:11.779
that's going to end up being the the class method, anyway I won't get bogged down

375
00:21:11.779 --> 00:21:15.190
in that now ... but so what we want to do then

376
00:21:15.190 --> 00:21:18.590
... finally is ...

377
00:21:18.590 --> 00:21:22.419
get over to our application code now that we've described the code,

378
00:21:22.419 --> 00:21:25.450
the code we wish we had, at least we've described that it should respond to the greet method so

379
00:21:25.450 --> 00:21:26.619
we're going to go nano

380
00:21:26.619 --> 00:21:30.389
down to lib and our greeter and we'll go in here and we'll

381
00:21:30.389 --> 00:21:34.149
add a method greet and we'll do

382
00:21:34.149 --> 00:21:38.649
end there and control X out of that and let's see our our RSpec

383
00:21:38.649 --> 00:21:41.649
... now passes but our Cucumber

384
00:21:41.649 --> 00:21:44.840
will still fail I believe yes because

385
00:21:44.840 --> 00:21:47.860
... now at least we've got one you know another one of our

386
00:21:47.860 --> 00:21:52.279
Cucumber steps as part of the high-level feature is not passing. Its expecting to see

387
00:21:52.279 --> 00:21:52.820
hello

388
00:21:52.820 --> 00:21:56.549
and we're not seeing hello and you can ... may be if we go back to the

389
00:21:56.549 --> 00:22:00.350
slides this is this you know there's potentially many little unit test cycles

390
00:22:00.350 --> 00:22:00.940
for this

391
00:22:00.940 --> 00:22:04.740
these larger acceptance test ... cycle at the top level

392
00:22:04.740 --> 00:22:08.309
particularly to the extent that we've broken up that acceptance test into those three

393
00:22:08.309 --> 00:22:12.929
components ... but so those components almost ... almost that's the way it has been structured ...

394
00:22:12.929 --> 00:22:16.379
corresponding to individual unit tests.  So let's go and have a little another

395
00:22:16.379 --> 00:22:20.730
unit test which is maybe that the default response should be hello.  So if we go in here and we do nano

396
00:22:20.730 --> 00:22:21.519
spec

397
00:22:21.519 --> 00:22:24.619
... what's the next thing ... forgotten what it's called ... greeter spec like that

398
00:22:24.619 --> 00:22:27.869
and then we could have another one where we say its ...

399
00:22:27.869 --> 00:22:31.279
should respond with ...

400
00:22:31.279 --> 00:22:34.600
hello ... how can I do it ... hello

401
00:22:34.600 --> 00:22:38.119
by default ... and do

402
00:22:38.840 --> 00:22:41.919
and then we can say a greeter

403
00:22:41.919 --> 00:22:45.299
think that's right ... new

404
00:22:45.299 --> 00:22:48.470
... and we've got greet ...

405
00:22:49.129 --> 00:22:52.240
should equal

406
00:22:52.240 --> 00:22:55.629
... hello just by default and we'll do

407
00:22:56.129 --> 00:22:59.179
... and there save that and

408
00:22:59.179 --> 00:23:04.600
so now let's see our spec. So we've got now a failure. One pass one failure there

409
00:23:04.600 --> 00:23:07.889
Where this is another little unit test loop ... so

410
00:23:07.889 --> 00:23:12.250
we can you know and if we happen to run I mean usually we wouldn't necess ... I mean

411
00:23:12.250 --> 00:23:14.419
to the extent that we just only made changes to

412
00:23:14.419 --> 00:23:17.700
... unit tests we wouldn't particularly need to run the acceptance tests ...

413
00:23:17.700 --> 00:23:22.470
test ... the higher-level ... but so what I would do now is go into our

414
00:23:22.470 --> 00:23:26.129
Ruby code there and just give this a default

415
00:23:26.129 --> 00:23:29.779
... return value of hello like so

416
00:23:30.309 --> 00:23:33.779
and we should see now that our unit test top, I've

417
00:23:33.779 --> 00:23:36.889
you see, sometimes you have to go back there and

418
00:23:36.889 --> 00:23:40.350
... let's just that like so. Like that

419
00:23:40.350 --> 00:23:43.419
run the RSpec so that's now part of our all of our little

420
00:23:43.419 --> 00:23:47.100
... individual unit tests are are passing

421
00:23:47.100 --> 00:23:50.179
and if we come back up to cucumber we should see that that now all

422
00:23:50.179 --> 00:23:54.090
goes green so there we go. That was this acceptance test unit test

423
00:23:54.090 --> 00:23:57.480
... cycle in action I was using Cucumber for the high level and

424
00:23:57.480 --> 00:24:00.590
Rspec for the low level but I didn't have to I could have done

425
00:24:00.590 --> 00:24:04.169
... you know, it with different tools I could've used RSpec for both of them

426
00:24:04.169 --> 00:24:07.320
... the key thing I would say is that ...

427
00:24:08.049 --> 00:24:11.190
you know you want to keep doing this over and over again religiously

428
00:24:11.190 --> 00:24:14.250
... the RSpec book is is a great

429
00:24:14.250 --> 00:24:17.929
... you know aid to sort of seeing that in low-level from a

430
00:24:17.929 --> 00:24:20.950
lot of different perspectives and yeah this

431
00:24:20.950 --> 00:24:25.389
you know this is of course the, I would say valuable to the to the solo individuals, to the

432
00:24:25.389 --> 00:24:27.109
centralized team, to the distributed team

433
00:24:27.109 --> 00:24:30.470
but particularly as regards the distributed team

434
00:24:30.470 --> 00:24:33.690
where there may be ... the communication may not be as effective

435
00:24:34.279 --> 00:24:37.779
as it is in a centralized team or as obviously you know within an individual's mind of course

436
00:24:37.779 --> 00:24:38.990
that depends on the individual.

437
00:24:38.990 --> 00:24:42.659
... you know you really want this kinda rigor

438
00:24:42.659 --> 00:24:47.200
... to make sure that you're connecting what you're doing to the high level customer

439
00:24:47.200 --> 00:24:48.450
story as business value

440
00:24:48.450 --> 00:24:52.250
and then that all of the individual little elements are testing

441
00:24:52.250 --> 00:24:56.269
and I can't say often enough its absolutely critical that you see

442
00:24:56.269 --> 00:24:59.929
all of the tests fail before you see them pass. I often

443
00:24:59.929 --> 00:25:02.970
get pull requests from from developers around the world

444
00:25:02.970 --> 00:25:06.629
and you know great lots of fantastic tests but you know sometimes I can break

445
00:25:06.629 --> 00:25:07.399
the

446
00:25:07.399 --> 00:25:11.149
application and I see that the test does not fail and you know that that just

447
00:25:11.149 --> 00:25:13.629
basically is is not what we want to see.  Of course mutation testing

448
00:25:13.629 --> 00:25:17.250
if we could automate that and add that into pull requests that would be very good but that's something

449
00:25:17.250 --> 00:25:22.049
we're working on in Agile Ventures. Alright so that said the BDD/TDD cycle versus the

450
00:25:22.049 --> 00:25:22.720
acceptance test

451
00:25:22.720 --> 00:25:26.200
unit test cycle. My personal preference call it acceptance test unit test ...

452
00:25:26.200 --> 00:25:29.200
but it is the way to Clean Code

453
00:25:29.799 --> 00:25:30.139
Bye for now.
