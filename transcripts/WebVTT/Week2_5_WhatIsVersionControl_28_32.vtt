WEBVTT

0
00:00:00.160 --> 00:00:04.640
Right so let's talk about version control. You're probably not asking

1
00:00:04.640 --> 00:00:08.290
what is version control ... because you're likely familiar with it already.

2
00:00:08.290 --> 00:00:11.830
But just, just in case ... its - the idea is that ...

3
00:00:11.830 --> 00:00:15.170
it's a system that records changes to your files over time

4
00:00:15.170 --> 00:00:19.289
and ... this this can be ... I think that the tricky concept

5
00:00:19.289 --> 00:00:22.519
for people who have not been too familiar with version control before even

6
00:00:22.519 --> 00:00:25.039
actually the file system itself, just the idea that there are

7
00:00:25.039 --> 00:00:28.580
you know files and that they are laid out in a certain structure and you can access them through the

8
00:00:28.580 --> 00:00:29.439
command line

9
00:00:29.439 --> 00:00:33.570
is ... potentially it's just ... you know something that

10
00:00:33.570 --> 00:00:36.710
more experienced developers can take for granted that everyone understands you

11
00:00:36.710 --> 00:00:37.020
know ...

12
00:00:37.020 --> 00:00:40.890
file system, version control ... and so on but particularly if

13
00:00:40.890 --> 00:00:44.219
you've kind of worked, you know, in an IDE

14
00:00:44.219 --> 00:00:48.550
for most of your programming experience ... you know ... worked on individual projects

15
00:00:48.550 --> 00:00:49.719
where you haven't used version control

16
00:00:49.719 --> 00:00:54.399
... it's ... it is a new concept for - for some people and we need to remember that

17
00:00:54.399 --> 00:00:58.359
... it's also absolutely critical for teams

18
00:00:58.359 --> 00:01:02.410
really ... for collaborating whether you're - you're centralized or

19
00:01:02.410 --> 00:01:06.580
or distributed but anyhow the key thing that the version control allows is

20
00:01:06.580 --> 00:01:09.619
you can take individual files or in you know

21
00:01:09.619 --> 00:01:13.229
the entire project's collection of files and different directories and you can revert them to

22
00:01:13.229 --> 00:01:14.150
a previous state.

23
00:01:14.150 --> 00:01:18.110
So I often like to describe it as a kind of - it's like a a checkpoint

24
00:01:18.110 --> 00:01:22.320
in a game, in a computer game where okay right whatever happens afterwards, where you know

25
00:01:22.320 --> 00:01:22.890
whatever

26
00:01:22.890 --> 00:01:26.689
... kind of death I suffer at the hands of oh I don't know

27
00:01:26.689 --> 00:01:29.780
like pogo stick ... pogo-ing snakes wielding ray-guns

28
00:01:29.780 --> 00:01:32.860
then I can get back to this this earlier point I won't have to re do this

29
00:01:32.860 --> 00:01:33.540
earlier -

30
00:01:33.540 --> 00:01:36.310
earlier work. So being able to get back to that point, it's like having a time machine,

31
00:01:36.310 --> 00:01:38.090
it's fantastic ...

32
00:01:38.090 --> 00:01:41.220
you can compare the changes that you made as we

33
00:01:41.220 --> 00:01:44.240
I think we've - as programmers - we've all experienced that

34
00:01:44.240 --> 00:01:48.040
you know several hours lost to you know a small

35
00:01:48.040 --> 00:01:51.860
... a very very very small punctuation issue somewhere in our code

36
00:01:51.860 --> 00:01:54.920
... being you know with with if you've got ...

37
00:01:54.920 --> 00:01:58.790
version control and you have snapshots of - you know - the working system and the

38
00:01:58.790 --> 00:01:59.310
system

39
00:01:59.310 --> 00:02:03.850
where it's broken you can do a - you know - comparison and highlight just exactly

40
00:02:03.850 --> 00:02:05.219
what those changes are. So it's a

41
00:02:05.219 --> 00:02:09.450
very useful ... you also get views of who modified the source

42
00:02:09.450 --> 00:02:13.140
in the past.  Again particularly if you're in a team and we're saying why was that thing inserted

43
00:02:13.140 --> 00:02:16.250
head and the code that causes the production servers to explode!?!

44
00:02:16.250 --> 00:02:20.680
... no - "no-one knows; sorry - oh let's do - let's have a look and see" oh yes well

45
00:02:20.680 --> 00:02:23.830
you know Bert you shouldn't have you know added that

46
00:02:23.830 --> 00:02:27.440
you know ... rm -rf system call and so on anyway ...

47
00:02:27.440 --> 00:02:30.459
but yeah it really version control still very useful

48
00:02:30.459 --> 00:02:34.819
in individual products still use it in individual projects but absolutely huge

49
00:02:34.819 --> 00:02:38.209
for multiple developers and has been for a long time ...

50
00:02:38.209 --> 00:02:41.220
it's ... like you know there are a lot of other ways of sharing

51
00:02:41.220 --> 00:02:44.569
files like you know by sending them by email or using FTP

52
00:02:44.569 --> 00:02:49.110
or what have you ... the idea with most version control systems is that you've got

53
00:02:49.110 --> 00:02:52.680
... a repository where you grab that entire copy of everything

54
00:02:52.680 --> 00:02:56.530
... and so you've got everything that's going on rather than sharing individual -

55
00:02:56.530 --> 00:02:59.769
individual - individual files anyhow there are many types available

56
00:02:59.769 --> 00:03:03.540
... Armando and Dave did talk about several of them in the ...

57
00:03:03.540 --> 00:03:07.280
the 169 course ... we focus on Git here because ...

58
00:03:07.280 --> 00:03:12.180
although I guess Git ... the interesting thing about 169 Engineering Software as a Service course

59
00:03:12.180 --> 00:03:16.870
is that you don't critically need that much understanding

60
00:03:16.870 --> 00:03:20.819
of Git you don't have to use it for the majority of the

61
00:03:21.330 --> 00:03:25.030
the assignments you kind of, you're encouraged to do so

62
00:03:25.030 --> 00:03:28.430
it has to be - you know - it has to be used ...

63
00:03:28.430 --> 00:03:32.950
for - you know - to deploy to Heroku as we'll talk about in the next section

64
00:03:32.950 --> 00:03:36.049
... but even then you can get away with - with

65
00:03:36.049 --> 00:03:39.680
with remarkably few ... commands but actually once you start

66
00:03:39.680 --> 00:03:43.069
working with a - with a team on any significant project then having

67
00:03:43.069 --> 00:03:46.480
really really good ... version control skills is

68
00:03:46.480 --> 00:03:49.680
absolutely essential and we'll focus on Git

69
00:03:49.680 --> 00:03:53.049
partly because you know it's what we use on AgileVentures it's what

70
00:03:53.049 --> 00:03:56.319
I think now just almost everybody's using it's a

71
00:03:56.319 --> 00:03:59.400
it is just so so good for ...

72
00:03:59.400 --> 00:04:03.140
you know people working independently of each other know. Now why is it called Git

73
00:04:03.140 --> 00:04:06.580
... Git; I am British and I can confirm that it does mean

74
00:04:06.580 --> 00:04:10.220
that you're stupid, if you're being called a git. Thats

75
00:04:10.220 --> 00:04:13.590
Linus Torvalds who is not British but ... I guess - you know -

76
00:04:13.590 --> 00:04:16.609
grabbing our slang â€¦ and absolutely - welcome to it welcome to it

77
00:04:16.609 --> 00:04:20.400
... Linus who'd previously created

78
00:04:20.400 --> 00:04:24.669
... Linux which is obviously a great thing and so much of the web and the internet

79
00:04:24.669 --> 00:04:25.550
runs on that

80
00:04:25.550 --> 00:04:28.630
... what should I say ... much of the things that are running on the internet computers that

81
00:04:28.630 --> 00:04:29.290
are running Linux

82
00:04:29.290 --> 00:04:32.850
... internet and web: do you know the difference? can you? answers on a postcard please

83
00:04:32.850 --> 00:04:37.120
er no. Anyway ... Git. I am, I mean I have to say

84
00:04:37.120 --> 00:04:41.320
I was already impressed you know with Linux or Linux

85
00:04:41.320 --> 00:04:44.350
oh I don't know how to pronounce his name! My Torvalds is really

86
00:04:44.350 --> 00:04:48.300
knocking my socks off ... apparently it can also be called global information tracker

87
00:04:48.300 --> 00:04:51.820
... it's just the interesting thing I think about Git, and we've got

88
00:04:51.820 --> 00:04:55.330
... more about it I think in appendix five

89
00:04:55.330 --> 00:04:58.650
of the ... of the book there so you know if you need some background reading

90
00:04:58.650 --> 00:05:02.229
that's a great start ... but that

91
00:05:02.229 --> 00:05:05.539
I think Linus was, Mr Torvalds

92
00:05:05.539 --> 00:05:09.560
ah sorry I'm confused about pronouncing your name you doing this

93
00:05:09.560 --> 00:05:12.960
huge ... you know this distributed development of Linux

94
00:05:12.960 --> 00:05:16.570
of Linux, around the world you know developed

95
00:05:16.570 --> 00:05:19.780
a version control system that met those needs and

96
00:05:20.400 --> 00:05:23.550
... Git ended up; It's somewhat complicated ...

97
00:05:23.550 --> 00:05:26.570
perhaps more than it needs to be in some places ... but

98
00:05:26.570 --> 00:05:29.650
it's just so powerful, it's just so good for ... decentralized ...

99
00:05:29.650 --> 00:05:33.479
teams and distributed teams you just - you just have to know about it really ...

100
00:05:33.479 --> 00:05:37.810
also GitHub; we're great fans of GitHub ... that seems to be now it's like

101
00:05:37.810 --> 00:05:40.820
it's almost difficult to talk about Git without talking about GitHub it's - it's

102
00:05:40.820 --> 00:05:41.270
become

103
00:05:41.270 --> 00:05:44.340
the most famous place to store Git repositories online

104
00:05:44.340 --> 00:05:47.960
I think some people it's ... it's a Git by itself is ...

105
00:05:47.960 --> 00:05:51.580
you know, Git is the protocol ... I guess for

106
00:05:52.350 --> 00:05:57.300
ahh it's a protocol, it's also a piece of software ... for doing the version control and GitHub is then a cloud

107
00:05:57.300 --> 00:05:57.930
hosting

108
00:05:57.930 --> 00:06:00.970
service ... to host your Git repo or so

109
00:06:00.970 --> 00:06:04.560
... the the thing about about GitHub and indeed other ... I mean there are other ... BitBucket

110
00:06:04.560 --> 00:06:05.620
and other people using

111
00:06:05.620 --> 00:06:09.710
... git as well ... but basically if you're working as -

112
00:06:09.710 --> 00:06:13.800
as a team you need, as a distributed team, you need a central project repository

113
00:06:13.800 --> 00:06:17.900
so you know GitHub is the largest code host on the planet; they're doing a fantastic job

114
00:06:17.900 --> 00:06:21.050
they have ... their free tier is as long as it's all public ...

115
00:06:21.050 --> 00:06:24.319
then everything's free and if you want to have private repositories ... I know for example

116
00:06:24.319 --> 00:06:25.330
that with AgileVentures that's

117
00:06:25.330 --> 00:06:29.690
absolutely fine. We do all of our ... you know all of our code is open source

118
00:06:29.690 --> 00:06:33.030
and everything's done open development and we just you know I think there's a lot of

119
00:06:33.030 --> 00:06:33.569
...

120
00:06:33.569 --> 00:06:37.000
value to that, that ... transparency.  Although there are other

121
00:06:37.000 --> 00:06:40.430
you know if you go to BitBucket I think you can get free ... private repositories

122
00:06:40.430 --> 00:06:43.990
for a small number and with GitHub you can pay them and get all of the great

123
00:06:43.990 --> 00:06:48.050
GitHub stuff ... and a bit of privacy which I think is over-rated, but anyway

124
00:06:48.050 --> 00:06:52.190
but that's another story the ... what GitHub has is the you know

125
00:06:52.190 --> 00:06:55.220
they also got groups and so for example; actually we can go and see

126
00:06:55.780 --> 00:07:00.130
if we go to Github and we go and look at AgileVentures ooh, wo dee do dee do

127
00:07:00.130 --> 00:07:03.310
Oh don't do that, oh, on no oh GitHub

128
00:07:04.000 --> 00:07:07.000
yes go on AgileVentures yes

129
00:07:07.520 --> 00:07:12.250
so AgileVentures and you know then we have teams and we have difference sorts of teams

130
00:07:12.250 --> 00:07:15.830
we can manage who has access to what and who can do - do what - it's all very

131
00:07:15.830 --> 00:07:17.599
powerful and useful

132
00:07:17.599 --> 00:07:20.949
... you know you've got integrated issue tracking ...

133
00:07:20.949 --> 00:07:25.680
which I guess hmm, ... I don't know; we'll have a look maybe we'll see

134
00:07:26.220 --> 00:07:29.889
... let's have a look - if we - we ... partly in AgileVentures

135
00:07:29.889 --> 00:07:33.389
we don't use that issue so much because we're having such regular scrums

136
00:07:33.389 --> 00:07:37.080
... every day that we're sort of talking about stuff face to face I guess if we go and

137
00:07:37.080 --> 00:07:39.360
look at ... let's go and see LocalSupport but we got

138
00:07:39.360 --> 00:07:42.789
... yeah the ...

139
00:07:42.789 --> 00:07:45.889
there maybe the older version of this you know had

140
00:07:45.889 --> 00:07:49.370
issues; but so you can see with these ... these issues as you know the people can you know

141
00:07:50.090 --> 00:07:53.740
mention things that are issues with your projects and you know can sort of coordinate around

142
00:07:53.740 --> 00:07:54.270
everything

143
00:07:54.270 --> 00:07:58.550
really really really really useful ... you know that the pull requests which we'll

144
00:07:58.550 --> 00:08:01.759
talk about more ... allows for this process of code overview

145
00:08:01.759 --> 00:08:05.740
again super useful if you're on a centralized team but distributed teams,

146
00:08:05.740 --> 00:08:09.050
wow! Just the ability for everybody to sort of look

147
00:08:09.050 --> 00:08:12.650
carefully at what is being presented for integration into the main ...

148
00:08:12.650 --> 00:08:16.150
codebase is really really useful - and and free wikis that everyone can edit and

149
00:08:16.150 --> 00:08:16.970
that's just

150
00:08:16.970 --> 00:08:20.970
really handy too - but so before we wax too lyrical about GitHub

151
00:08:20.970 --> 00:08:24.389
let's talk a bit more about about Git ... and you've probably done some things like

152
00:08:24.389 --> 00:08:25.039
this

153
00:08:25.039 --> 00:08:28.710
getting set up with your ... with Git at different points

154
00:08:29.229 --> 00:08:34.000
... you know you can set up your default name and email I think if we go and have a look

155
00:08:34.000 --> 00:08:35.820
down here I've probably got

156
00:08:35.820 --> 00:08:39.219
let's got and see git config minus L I can list my config

157
00:08:39.219 --> 00:08:42.320
oh I've thrown in a load of aliases but we can see my

158
00:08:42.320 --> 00:08:45.660
username and email are â€¦ in there

159
00:08:45.660 --> 00:08:49.010
already .... and so

160
00:08:49.010 --> 00:08:52.610
it's as simple as you know you create a project folder and then you do

161
00:08:53.120 --> 00:08:56.950
... git init and ... and then this then this there are certain things that

162
00:08:56.950 --> 00:08:57.620
people get

163
00:08:57.620 --> 00:09:00.970
tripped up on here I guess if we just sort of make a thing which would be

164
00:09:01.490 --> 00:09:04.890
... let's call this git git test or something I don't know

165
00:09:04.890 --> 00:09:07.980
and cd in there is - is this relationship between

166
00:09:08.670 --> 00:09:12.660
the folder and the you know the git repository

167
00:09:12.660 --> 00:09:16.170
because so to begin with if we're starting off here in git test there's

168
00:09:16.170 --> 00:09:17.070
nothing in there

169
00:09:17.070 --> 00:09:20.610
then I can do git init like this. The key thing to see

170
00:09:21.290 --> 00:09:24.500
is that we've now got a dot git folder in there and we can do ...

171
00:09:25.060 --> 00:09:28.380
for example ls -la dot git there

172
00:09:28.380 --> 00:09:31.430
and we can see we've now got all this paraphernalia, all this infrastructure

173
00:09:32.220 --> 00:09:35.720
directories set up to manage you know a git repository

174
00:09:35.720 --> 00:09:38.720
and you can in principle you can just remove ...

175
00:09:39.970 --> 00:09:44.399
that dot git directory and now ... the - the code that you have here is no longer

176
00:09:44.959 --> 00:09:48.050
that's no longer a git repository. We can do it again: git init and its back and its

177
00:09:48.050 --> 00:09:51.690
there it is.  So generally you don't want to remove that, I mean unless ... and what sometimes is

178
00:09:51.690 --> 00:09:53.220
and this is the kind of thing actually

179
00:09:53.220 --> 00:09:57.720
... often people getting started with git run into the problem they may end up doing

180
00:09:57.720 --> 00:09:58.640
git init

181
00:09:58.640 --> 00:10:01.959
in a lower lower level directory and that can get

182
00:10:01.959 --> 00:10:06.190
very confusing because really what you never want to see is you never want to

183
00:10:06.190 --> 00:10:06.750
see ...

184
00:10:06.750 --> 00:10:10.720
dot git in a lower-level directory and then also into a higher-level directory

185
00:10:10.720 --> 00:10:15.120
... high-low so on and so forth ... I guess maybe there might be some justification for doing it

186
00:10:15.120 --> 00:10:18.570
sometimes but that's ... that can often be - be a problem

187
00:10:18.570 --> 00:10:21.959
but so here we are in this git test directory ; I've done git init

188
00:10:21.959 --> 00:10:25.360
git init I've got nothing in there, let's maybe make ... what

189
00:10:25.360 --> 00:10:28.350
could we have that we could have in there.  We could have a README you know that would be a

190
00:10:28.350 --> 00:10:29.540
good thing so we could do ...

191
00:10:29.540 --> 00:10:34.310
touch ... README dot md is the sort of standard thing that we might have there

192
00:10:34.310 --> 00:10:38.160
... let's have a look there; we have a README me now so if we do git status we can see

193
00:10:38.160 --> 00:10:41.339
you know I have an untracked file and I can start

194
00:10:41.339 --> 00:10:44.820
so this is the interesting, this is actually a two-stage process as many of you I am sure are

195
00:10:44.820 --> 00:10:45.360
familiar

196
00:10:45.360 --> 00:10:48.860
... with for how Git tracks and then

197
00:10:48.860 --> 00:10:52.680
and creates a tr ... you know telling it first, you know if we do git add

198
00:10:52.680 --> 00:10:56.000
dot would be all files.  Let's do it for that particular one that README there, if we

199
00:10:56.000 --> 00:11:00.450
do git add README now we've gone from a situation where

200
00:11:00.450 --> 00:11:04.810
maybe I will make that window a little bit bigger we've gone from the situation that we had here

201
00:11:04.810 --> 00:11:09.110
where README was untracked. We've now gone to the situation where it's being tracked

202
00:11:09.110 --> 00:11:12.829
or it would potentially be tracked but it's - it's gone into this staging area

203
00:11:12.829 --> 00:11:16.660
its not actually ... it's not actually been committed

204
00:11:16.660 --> 00:11:20.149
into the repository and the - you know - until you do this

205
00:11:20.649 --> 00:11:23.649
... git commit, for example like there we go git commit

206
00:11:23.649 --> 00:11:26.649
minus m ... often it's the initial commit

207
00:11:28.410 --> 00:11:31.600
like so; until we've done that we haven't we haven't got

208
00:11:31.600 --> 00:11:35.010
... a, you know anything in our repository and sort of

209
00:11:35.010 --> 00:11:38.250
so that ... two-stage process ... I guess it's - it's one;

210
00:11:38.820 --> 00:11:43.500
you know make your changes â€¦ two; add them to the repository and then commit them to the

211
00:11:43.500 --> 00:11:44.480
repository

212
00:11:44.480 --> 00:11:47.890
... is you know its powerful

213
00:11:47.890 --> 00:11:51.450
because it allows you to do various subtle things with the you know,

214
00:11:51.450 --> 00:11:55.089
not so much the order but you know you can make various sorts of changes

215
00:11:55.089 --> 00:11:58.630
in different files and you can add them and so on so it's very very flexible and powerful but

216
00:11:58.630 --> 00:12:02.639
but that's a lot because it's almost enough rope for you to hang yourself with

217
00:12:02.639 --> 00:12:05.670
in that you can make ... you can think you fixed something by making changes and

218
00:12:05.670 --> 00:12:07.000
then you want to push them to

219
00:12:07.000 --> 00:12:10.540
... Heroku or to somewhere else and because you haven't

220
00:12:10.540 --> 00:12:13.959
... added them or you haven't committed them or some issue and

221
00:12:13.959 --> 00:12:17.339
you know ... I've been using Git you know all day every day for the last

222
00:12:17.980 --> 00:12:21.910
I think its three years now and ... bit still occasionally I will

223
00:12:21.910 --> 00:12:25.329
have forgotten to do that but so particularly for people coming to

224
00:12:25.329 --> 00:12:28.529
Git ... particularly if it's the first version repository system, ... version control

225
00:12:28.529 --> 00:12:32.620
repository system that they've, or the first version control system that they've used that can be ...

226
00:12:32.620 --> 00:12:35.769
very challenging and so good to be aware of you know

227
00:12:35.769 --> 00:12:39.010
developers coming in to your team who are not necessarily so familiar with Git or version control ...

228
00:12:39.010 --> 00:12:42.240
students ... other learners ...

229
00:12:42.850 --> 00:12:45.950
but so ... if we want to make - what the -

230
00:12:45.950 --> 00:12:49.149
we've got two new create projects - I think we got two slides

231
00:12:49.149 --> 00:12:52.570
the same there â€¦ let's move on â€¦ but yeah - so this basic workflow that I've

232
00:12:52.570 --> 00:12:56.130
I've - I've been referring to is that you've got your

233
00:12:56.130 --> 00:13:00.290
you know directory that you working in ... you can stage files, this is the add thing

234
00:13:00.290 --> 00:13:04.000
to get them into the staging area and then you can ... commit them

235
00:13:04.000 --> 00:13:07.000
and get them into the the repository ... and ...

236
00:13:07.670 --> 00:13:11.639
you know that repository you know is then on your local machine you can in principle

237
00:13:12.250 --> 00:13:15.750
check it out into other areas ... once you've got it up into the

238
00:13:16.250 --> 00:13:19.540
the cloud on something like GitHub you know other - other developers can check that

239
00:13:19.540 --> 00:13:20.589
out

240
00:13:20.589 --> 00:13:25.230
and so on ... yeah we talked about the staging area ... this is this sort of flexibility

241
00:13:25.230 --> 00:13:28.550
you know you can you can ... to be honest I tend to find I don't

242
00:13:29.079 --> 00:13:32.089
use this power ... so much of the ability to sort of

243
00:13:32.089 --> 00:13:35.410
... to commit

244
00:13:35.410 --> 00:13:38.870
various things in stages I tend to want to go into a situation where

245
00:13:39.459 --> 00:13:43.620
I basically have if we, if we look at the git status here that I have nothing to commit

246
00:13:43.620 --> 00:13:44.250
here

247
00:13:44.250 --> 00:13:48.100
and if I make a series of changes I'm gonna kind of be working on a

248
00:13:48.100 --> 00:13:52.570
you know single user story, single feature, single chore just to get that stuff done

249
00:13:52.570 --> 00:13:56.970
and then commit it in and and not do this clever mucking around with little bits and

250
00:13:56.970 --> 00:13:57.940
pieces but ...

251
00:13:57.940 --> 00:14:01.220
you know that ... power's there if you if you need it

252
00:14:01.220 --> 00:14:04.399
... so yeah we we've looked at this ...

253
00:14:04.930 --> 00:14:09.279
adding process that you know adding them different from actually committing

254
00:14:09.279 --> 00:14:13.800
... I'm a, I'm a big fan of the doing this actually in one in one stage that for

255
00:14:13.800 --> 00:14:15.220
example if we now

256
00:14:15.220 --> 00:14:18.380
let ... README ... let's go in here and we say

257
00:14:19.079 --> 00:14:22.079
... what have we got here this is ... this

258
00:14:22.079 --> 00:14:25.149
you must read this, there you go, you must read this! there we

259
00:14:25.149 --> 00:14:28.420
go and ... we exit out there. Now

260
00:14:28.420 --> 00:14:32.779
... I would be very tempted to do git and even shorter to do git commit

261
00:14:32.779 --> 00:14:35.779
minus a m ... you know updated README

262
00:14:37.040 --> 00:14:41.110
like so and so that would, with the minus a flag,

263
00:14:41.110 --> 00:14:45.170
add those things and actually collapse those two steps down to a to a

264
00:14:45.170 --> 00:14:45.810
single step.

265
00:14:45.810 --> 00:14:49.399
Thing to be aware of here is with this minus a, is it will only work with the

266
00:14:49.399 --> 00:14:53.290
the files that you already got being tracked, if you create a new file

267
00:14:53.290 --> 00:14:56.480
so if we did ... touch ... let's have a look

268
00:14:56.480 --> 00:14:59.550
... don't read me? I don't know I guess that's another one DONTREADME

269
00:15:00.079 --> 00:15:03.449
dot MD ... if I now do ...

270
00:15:03.449 --> 00:15:06.670
git commit minus a m updated, or created even

271
00:15:07.800 --> 00:15:10.959
make sure your commit messages, hmmm DONTREADME

272
00:15:10.959 --> 00:15:15.940
like so â€¦ there's nothing - there's nothing added, it gives me a warning there, nothing added to commit but

273
00:15:15.940 --> 00:15:17.089
untracked file present

274
00:15:17.089 --> 00:15:20.279
so you you know if it's a new file that's not in the system then you do need to use

275
00:15:20.279 --> 00:15:21.630
that git add.  So there's another ...

276
00:15:21.630 --> 00:15:25.040
there's always often these little places to ...

277
00:15:25.040 --> 00:15:28.279
get caught out. Now to do this - this pushing thing

278
00:15:28.279 --> 00:15:31.860
if you're just you know working individually on a single machine and you're just

279
00:15:31.860 --> 00:15:35.110
you know you can carry on ... going through making changes

280
00:15:35.110 --> 00:15:38.430
... you know ... adding things

281
00:15:38.430 --> 00:15:41.649
rolling back the ... we'll have a video soon

282
00:15:41.649 --> 00:15:45.170
associated with the Git Immersion assignment which will show a lot more

283
00:15:45.170 --> 00:15:50.100
of - detail about that. Do do the ... Git Immersion tutorial is going to be part of this week's

284
00:15:50.610 --> 00:15:54.000
assignments ... but more on all of the details on that

285
00:15:54.000 --> 00:15:57.070
... later on ... kind of the

286
00:15:57.070 --> 00:16:00.449
key things though is that like that's all very well just

287
00:16:00.449 --> 00:16:03.820
on your local machine but ... the

288
00:16:03.820 --> 00:16:07.490
you know Git has this this set up to cope with

289
00:16:07.490 --> 00:16:10.690
multiple ... reposit ... you can connect it to multiple repositories

290
00:16:11.360 --> 00:16:15.850
so you've got this command "git push" which in its basic form will take two

291
00:16:15.850 --> 00:16:17.449
arguments it will say git push

292
00:16:17.449 --> 00:16:20.820
and then you'll have the name of a remote Git repository

293
00:16:20.820 --> 00:16:23.940
and the branch of that repository ... that you want to

294
00:16:23.940 --> 00:16:27.730
you want to push to ... so we can have a look at

295
00:16:27.730 --> 00:16:31.170
our remotes using this git remote minus v thing ...

296
00:16:31.170 --> 00:16:34.290
and this is really ... at the moment we should see here that we haven't got

297
00:16:34.290 --> 00:16:38.060
any any remotes there ... let's see if we're gonna go and

298
00:16:38.060 --> 00:16:43.149
add ... something I could kinda go and get on GitHub and let's just go into my

299
00:16:43.649 --> 00:16:46.790
... tansaku ... that's my

300
00:16:46.790 --> 00:16:50.040
GitHub and let's go and create a new

301
00:16:50.040 --> 00:16:53.399
repository and get in there and call this git

302
00:16:53.399 --> 00:16:56.399
test ... and we'll just put test in there and make

303
00:16:56.940 --> 00:17:00.300
that public and leave it like that there for the

304
00:17:00.300 --> 00:17:04.199
moment ... you know so on GitHub creating your - your repository is as simple as that ... with that we now have a

305
00:17:04.199 --> 00:17:05.360
remote repository in

306
00:17:05.360 --> 00:17:09.030
in the cloud that has a a ... location. We can refer to it via

307
00:17:09.030 --> 00:17:12.559
... HTTPS or SSH ... I find

308
00:17:12.559 --> 00:17:16.699
I end up recommending everyone to use the HTTPS ... just because there's fewer

309
00:17:16.699 --> 00:17:17.669
keys. There's

310
00:17:17.669 --> 00:17:21.919
fewer setup but so it gives you these instructions here on how to create new

311
00:17:21.919 --> 00:17:22.679
repository

312
00:17:22.679 --> 00:17:26.949
and ... but you can push to an existing one which is what we've got here. So what I'm going to do is I'm now going to add

313
00:17:27.490 --> 00:17:31.010
a remote there.  We can do git ... remote add

314
00:17:31.010 --> 00:17:35.610
like so "git remote add origin" ... now when I do git remote -v

315
00:17:35.610 --> 00:17:38.990
we've got this is now the place ... we've sort of set that - this is

316
00:17:38.990 --> 00:17:42.200
the origin - it's - it's - it doesn't have any special meaning but it's a kinda

317
00:17:42.200 --> 00:17:43.539
convention that that says

318
00:17:43.539 --> 00:17:46.549
that's going to be the main ... repository for this

319
00:17:46.549 --> 00:17:49.990
you know the main cloud repository for this ... you know local developer

320
00:17:49.990 --> 00:17:53.789
repository on our own machine and then by doing git push minus u

321
00:17:53.789 --> 00:17:57.010
origin master what we will do is

322
00:17:57.010 --> 00:18:00.590
we'll push our master branch which is by default as the first branch that we're on ...

323
00:18:01.799 --> 00:18:06.090
and then ... we'll also set up with that "minus u" to say

324
00:18:06.090 --> 00:18:09.500
you know we can say "git push" in the future and it would just assume origin of

325
00:18:09.500 --> 00:18:11.309
master because that's usually what we want to do

326
00:18:11.309 --> 00:18:14.740
... so now we're all set up with - with a remote. I kind of introduced

327
00:18:14.740 --> 00:18:18.160
branches there which you may or may not be familiar with ... let's

328
00:18:18.160 --> 00:18:21.880
go on and talk ... you can ... I guess you've got these

329
00:18:21.880 --> 00:18:25.490
two different things to concern yourself with here. One is the the branches which are kind of

330
00:18:25.490 --> 00:18:29.169
... you know you can create sort of alternate

331
00:18:29.169 --> 00:18:33.039
parallel timelines for your code you can sort of split

332
00:18:33.039 --> 00:18:36.230
at a certain point and say I've made these changes oh now I'm going to go back in time and I'm going to

333
00:18:36.230 --> 00:18:37.250
split off

334
00:18:37.250 --> 00:18:41.650
from another one ... you've also got these ... branches is one thing

335
00:18:41.650 --> 00:18:45.760
... but then you've also got the different remotes in their different locations

336
00:18:45.760 --> 00:18:48.760
and so ... one of the things that might

337
00:18:49.390 --> 00:18:54.020
happen ... here let's ... all I've done here now let's have a look at our git test environment

338
00:18:54.020 --> 00:18:54.740
there

339
00:18:54.740 --> 00:18:57.770
so if I ... we now see that the ... the README

340
00:18:57.770 --> 00:19:01.309
is there ... what ... one of the things - you can end up

341
00:19:01.309 --> 00:19:05.539
and this is - this is - it'd be a common pass ... in some ways - sensibly - I maybe would have made this

342
00:19:05.539 --> 00:19:08.620
in our our organization like AgileVentures there

343
00:19:08.620 --> 00:19:11.799
... but what I can do here is I can say I can ...

344
00:19:12.490 --> 00:19:15.470
fork this ... actually this mirrors what we've ended up doing with ... Local

345
00:19:15.470 --> 00:19:17.080
Support which started out

346
00:19:17.080 --> 00:19:20.940
as you know my personal ... in my personal repository and we've moved it we've subsequently moved it

347
00:19:20.940 --> 00:19:21.600
over

348
00:19:21.600 --> 00:19:24.830
to AgileVentures this - this forking in completely different from branching; forking is

349
00:19:24.830 --> 00:19:26.130
specific to GitHub

350
00:19:26.130 --> 00:19:29.380
but so now by doing that simple fork operation we have a

351
00:19:29.380 --> 00:19:33.490
a copy of the code ... ah not the code, this - this

352
00:19:33.490 --> 00:19:37.150
repository on - on AgileVentures ... if we go back to the slides

353
00:19:38.470 --> 00:19:41.789
we can see now but we might do ... you know get remote add upstream

354
00:19:42.350 --> 00:19:45.600
so for example if I do git remote add upstream

355
00:19:46.230 --> 00:19:49.250
this is now adding another remote

356
00:19:49.789 --> 00:19:54.960
... in the list of remotes there ... you see even that the fetch and the push can be two different directions

357
00:19:54.960 --> 00:19:58.309
if we go and look at that that's gonna have this URL.  There's this

358
00:19:58.309 --> 00:20:01.429
that is you can even get away but this they've got this special clone URL down here

359
00:20:01.429 --> 00:20:03.220
with the dot git you can get away with

360
00:20:03.220 --> 00:20:06.490
just using the one on the address bar it's sometimes a bit faster and easier to find

361
00:20:06.490 --> 00:20:09.840
but so if we now add that as an upstream and I do "git remote -v" there

362
00:20:09.840 --> 00:20:13.260
we can see we've got now in the list of other

363
00:20:13.260 --> 00:20:16.830
... repositories that this git repository can talk to

364
00:20:17.340 --> 00:20:21.500
are both this we've got the origin one here and we've got an upstream one

365
00:20:21.500 --> 00:20:24.650
there and then you usually the way that it works

366
00:20:24.650 --> 00:20:28.100
is the upstream one is gonna be ... the you know the group ... shared repository

367
00:20:28.720 --> 00:20:32.419
and then the origin would be your kinda local developer repository

368
00:20:32.419 --> 00:20:35.919
and so that gets you set up to ultimately to move towards pull requests and other similar

369
00:20:35.919 --> 00:20:39.520
more complex things but so I can then in principle make

370
00:20:39.520 --> 00:20:42.970
let's see if we go and a have a look, I can just do a - a

371
00:20:42.970 --> 00:20:46.130
quick edit there ... edit here

372
00:20:46.130 --> 00:20:50.630
what is it? "really you must" to the README

373
00:20:50.630 --> 00:20:53.840
... online there usually you know you don't wanna be

374
00:20:53.840 --> 00:20:57.620
doing it through the ... interface there but that's y'know handy sometimes and

375
00:20:57.620 --> 00:20:58.400
in this case

376
00:20:58.400 --> 00:21:01.720
so now that's gonna be automatically committed in the AgileVentures one

377
00:21:01.720 --> 00:21:05.630
I can do things I think as we describe here in the slides where we say ...

378
00:21:05.630 --> 00:21:09.610
"git upstream fetch" ... I don't have to do the ...

379
00:21:09.610 --> 00:21:13.330
"git upstream fetch" ... "git fetch upstream"

380
00:21:14.240 --> 00:21:18.850
so the - I guess the key relation there is - is - you know -

381
00:21:18.850 --> 00:21:22.510
when you're pulling something it's doing fetch and then merge ... so if we do git fetch upstream

382
00:21:22.510 --> 00:21:23.320
there

383
00:21:23.320 --> 00:21:27.390
... that will the grab the upstream master

384
00:21:27.390 --> 00:21:30.799
... and then having done that I can do git - you know - git merge

385
00:21:30.799 --> 00:21:34.130
... upstream ... shall we do upstream/master like so

386
00:21:34.710 --> 00:21:38.360
and then so that change there if we now do "more README.md" here then I've got

387
00:21:38.360 --> 00:21:41.850
that change ... once we've I think done the first fetch

388
00:21:41.850 --> 00:21:45.919
we could achieve ... the same thing, the fetch and the merge in one thing, by doing

389
00:21:45.919 --> 00:21:49.700
"git pull upstream master" ... but

390
00:21:49.700 --> 00:21:53.100
yes I mean ... there's this you know

391
00:21:53.100 --> 00:21:57.110
the complexity of branching that ... is very very useful

392
00:21:57.110 --> 00:22:00.220
... when you're developing different user stories

393
00:22:00.220 --> 00:22:04.090
... and different you know working - working on things that it's not

394
00:22:04.090 --> 00:22:07.130
critically required  ... for the 169

395
00:22:07.130 --> 00:22:10.890
Engineering Software as a Service course but you know really really really handy

396
00:22:10.890 --> 00:22:15.270
and I think we go through the branching and checking out and sort of creating new branches

397
00:22:15.270 --> 00:22:19.090
and so on in a fair amount of detail in the

398
00:22:19.960 --> 00:22:23.840
the Git Immersion tutorial review that will come up in the homework section

399
00:22:23.840 --> 00:22:27.059
... so you know I think more on that

400
00:22:27.059 --> 00:22:31.230
there ... for the ... I guess what I will - I will say for this process

401
00:22:31.230 --> 00:22:34.620
of ... branching and checking out and so on

402
00:22:35.120 --> 00:22:38.740
fantastically useful for distributed teams doing things like GitHub pong and

403
00:22:40.030 --> 00:22:43.860
... remote pair programming, which we'll talk more about next week and ... a little bit more

404
00:22:43.860 --> 00:22:47.210
later on in these slides. Let's just talk a little bit more about what happens over at

405
00:22:47.210 --> 00:22:50.630
GitHub.  So you can see there how I sort of created some forks there

406
00:22:50.630 --> 00:22:55.150
... the sort of model that we've sorta got at AgileVentures and I think

407
00:22:55.150 --> 00:22:58.840
repeated in many other places as well is that you have

408
00:22:58.840 --> 00:23:02.809
a sort of organization ... repository and then I mean if we go and look at

409
00:23:02.809 --> 00:23:06.090
AgileVentures here we can see that sort of like WebSiteOne

410
00:23:06.090 --> 00:23:09.909
is quite an active project we can see that's been forked twenty five times by different

411
00:23:09.909 --> 00:23:10.580
people

412
00:23:10.580 --> 00:23:14.730
this is all you know they'll all have that set as their upstream.  We can go and have a

413
00:23:14.730 --> 00:23:15.620
look here

414
00:23:15.620 --> 00:23:18.980
at all the different people who have forked WebSiteOne

415
00:23:18.980 --> 00:23:22.309
and so for example you know Thomas will have his own

416
00:23:22.309 --> 00:23:25.720
branch and he'll have that checked out locally and he can then

417
00:23:25.720 --> 00:23:29.570
you know just do you know everything he wants there try out different things

418
00:23:29.570 --> 00:23:31.120
work on different bits of features

419
00:23:31.120 --> 00:23:34.809
and so on and you know it's completely isolated from

420
00:23:34.809 --> 00:23:38.049
anything that happens on AgileVentures WebSiteOne. So there's ... you know you basically get your

421
00:23:38.049 --> 00:23:38.780
own playground

422
00:23:38.780 --> 00:23:41.780
... which is - which is great fun ...

423
00:23:42.580 --> 00:23:45.730
and then until you create a PR

424
00:23:45.730 --> 00:23:49.270
pull request there and ... sometimes the interface for that can be

425
00:23:49.270 --> 00:23:53.130
a little confusing I guess maybe we should just run through a quick pull

426
00:23:53.130 --> 00:23:56.130
pull request there ... if we have a look ...

427
00:23:56.860 --> 00:23:59.860
like so - so if I'm now in the situation where ...

428
00:24:00.390 --> 00:24:04.200
all right, so do I still have the "DONTREADME" on there? If I do "git

429
00:24:04.200 --> 00:24:07.630
add DONTREADME" on there

430
00:24:07.630 --> 00:24:10.669
like so and then "git commit -

431
00:24:10.669 --> 00:24:14.110
m" ... added "don't readme"

432
00:24:14.110 --> 00:24:17.270
like so ... and then I do "git push origin master"

433
00:24:18.450 --> 00:24:21.990
what I'm gonna do is I'm gonna get this change which is to add this file

434
00:24:22.490 --> 00:24:25.860
... and push that on to my my local fork

435
00:24:25.860 --> 00:24:30.600
fork in ... in the GitHub, so if we go tansaku git

436
00:24:30.600 --> 00:24:34.809
test like so; is that the right one? ... we should see now we have a DONTREADME file

437
00:24:34.809 --> 00:24:38.720
as well; doesn't have anything in it but there we go ... now I could do a pull request

438
00:24:38.720 --> 00:24:42.169
... so we've got this green button here.  I can say right,

439
00:24:42.169 --> 00:24:45.440
and then you have to press "compare across forks" and so I'm going to look for, right

440
00:24:45.440 --> 00:24:48.830
so this is I'm finding the top-level and I'm going to do a pull request from

441
00:24:48.830 --> 00:24:52.260
... this is I always find the order of this ... its

442
00:24:52.260 --> 00:24:55.590
its ... we're requesting that AgileVentures

443
00:24:55.590 --> 00:24:58.890
... have I got this the wrong way round ...

444
00:24:58.890 --> 00:25:02.240
it's correct I think ... so the change is one commit

445
00:25:02.240 --> 00:25:05.260
"added don't readme" yeah, so that looks like the right commit, yes so we're ...

446
00:25:05.260 --> 00:25:08.679
this but I always find that the "pull request", the term itself is kinda confusing

447
00:25:08.679 --> 00:25:09.380
... for a

448
00:25:09.380 --> 00:25:12.559
long time I was a bit confused about it, but it's basically we are

449
00:25:12.559 --> 00:25:16.140
requesting ... here from our developer repository

450
00:25:16.140 --> 00:25:20.830
we are requesting that AgileVentures, the AgileVentures, you know the big

451
00:25:20.830 --> 00:25:24.500
you know upstream should pull in our change ... so I can sort of create a

452
00:25:24.500 --> 00:25:29.850
pull request, we should always you know ... explain what we're doing

453
00:25:29.850 --> 00:25:33.860
... you know to help our project manager know what we're contributing

454
00:25:33.860 --> 00:25:37.570
we do send pull requests - and then - so now actually because ...

455
00:25:37.570 --> 00:25:41.200
you know I have admin status on AgileVentures it's taken me directly to AgileVentures

456
00:25:41.200 --> 00:25:41.900
here

457
00:25:41.900 --> 00:25:45.110
and we can look through and see what files were changed. There are no ...

458
00:25:45.110 --> 00:25:48.320
and we can see there is a commit and so on and then

459
00:25:48.320 --> 00:25:51.640
so you know imagine that you know a different developer has submitted that

460
00:25:51.640 --> 00:25:54.520
from the team I can now, you know, review the code. Other people can all now look through it.  This

461
00:25:54.520 --> 00:25:55.330
becomes

462
00:25:55.330 --> 00:25:58.350
if we look now ... AgileVentures git test here

463
00:25:58.350 --> 00:26:01.520
anybody can view the different pull requests that are coming through ...

464
00:26:01.520 --> 00:26:04.669
and maybe we go see some examples

465
00:26:04.669 --> 00:26:07.750
... probably got some outstanding pull requests there, yeah,

466
00:26:07.750 --> 00:26:12.350
so this is you know ... we've got John there has got a pull request. I can see the

467
00:26:12.350 --> 00:26:13.690
changes that he's made.

468
00:26:13.690 --> 00:26:17.590
This is just absolutely huge I mean both for centralized teams, but for distributed teams

469
00:26:17.590 --> 00:26:21.250
you know everybody ... the visibility of the code that everybody's submitting, it's

470
00:26:21.250 --> 00:26:24.309
absolutely huge.  If we just get back to ...

471
00:26:24.309 --> 00:26:27.730
our little git test environment there

472
00:26:27.730 --> 00:26:31.990
we can see that we've got a pull request and then as the project manager I might come in and

473
00:26:31.990 --> 00:26:33.480
have a look through and say

474
00:26:33.480 --> 00:26:37.190
you know I might make comments and say things. Ultimately I would say alright oh yes let's

475
00:26:37.190 --> 00:26:38.549
merge that pull request hopefully

476
00:26:38.549 --> 00:26:42.620
and ... that gets merged in and so now when we go to AgileVentures

477
00:26:42.620 --> 00:26:47.010
... git test like so we've got that change is incorporated in there. So this

478
00:26:47.010 --> 00:26:50.559
its fantastically powerful this if you"re doing it in open source

479
00:26:50.559 --> 00:26:53.559
free framework in order to pull in ...

480
00:26:54.480 --> 00:26:58.230
contributions from developers potentially all around the world and ...

481
00:26:58.230 --> 00:27:01.260
you know everybody - you know - people have been doing this - you know -

482
00:27:01.260 --> 00:27:05.480
much longer than I've - I've been thinking about it but it is - is fantastically powerful

483
00:27:05.480 --> 00:27:08.789
and you know not particularly required -

484
00:27:08.789 --> 00:27:12.260
for the 169 Engineering Software as a Service course but

485
00:27:12.260 --> 00:27:17.419
y'know it's kind of once you've got the Git skills and Heroku skills and so on you're -

486
00:27:17.419 --> 00:27:18.010
you're

487
00:27:18.010 --> 00:27:21.340
set up really to do things as we've been doing them at AgileVentures which is to

488
00:27:21.340 --> 00:27:21.840
have

489
00:27:21.840 --> 00:27:25.289
you know your organization and your different projects and have people

490
00:27:25.289 --> 00:27:26.059
contribute

491
00:27:26.059 --> 00:27:29.090
to them ... you know from anywhere in the world and you know

492
00:27:29.090 --> 00:27:32.960
be getting together whether it's you're doing it entirely asynchronously or doing it synchronously

493
00:27:32.960 --> 00:27:33.690
like we do which is

494
00:27:33.690 --> 00:27:36.850
getting together in team scrums to discuss the features and the pull requests

495
00:27:36.850 --> 00:27:40.159
... it is extraordinarily powerful so ...

496
00:27:40.159 --> 00:27:43.260
yeah I guess just to touch on you know we can also use

497
00:27:43.260 --> 00:27:46.880
you know GitHub ... Git using push and pull you can GitHub pong which we'll talk

498
00:27:46.880 --> 00:27:47.779
more about next week

499
00:27:47.779 --> 00:27:50.990
and which I'm a big fan, though there are many different mechanisms to support

500
00:27:50.990 --> 00:27:54.789
... remote pair programming which I mean pair programming is just my thing

501
00:27:54.789 --> 00:27:58.429
and I think remote pair programming incredibly convenient and my favourite is GitHub Pong, but

502
00:27:58.429 --> 00:27:59.610
more about that

503
00:27:59.610 --> 00:28:02.840
next week and there's there's a lot more. Git is an extraordinary power tool

504
00:28:02.840 --> 00:28:07.399
and ... you know we can hardly do it justice here there is a lot more reading;

505
00:28:07.399 --> 00:28:11.220
I mentioned already appendix 5 ... of the textbook that's definitely,

506
00:28:11.220 --> 00:28:14.220
do check that out ... there's a great

507
00:28:14.970 --> 00:28:19.620
this is a great ... what do you â€¦ It's a PDF document by John

508
00:28:19.620 --> 00:28:20.110
Wiegley

509
00:28:20.110 --> 00:28:23.149
about Git from the Bottom Up which goes through .. it's not it's not that long

510
00:28:23.149 --> 00:28:26.460
I really really ... we ask you to read this before

511
00:28:26.460 --> 00:28:30.100
attempting the Git Immersion ... homework

512
00:28:30.100 --> 00:28:33.149
this this this week ... more of that later

513
00:28:33.149 --> 00:28:36.990
there's also this entire book on git. I personally haven't found myself

514
00:28:36.990 --> 00:28:40.230
with the free time to go to read all of this I tend to dip in and out of it ...

515
00:28:40.230 --> 00:28:44.299
but that is a fantastic resource. And I think we've also got another thing which you should definitely check out which

516
00:28:44.299 --> 00:28:48.450
is this visual guide to version control in general so lots of fantastic resources out

517
00:28:48.450 --> 00:28:48.919
there

518
00:28:48.919 --> 00:28:52.750
but I would say you know extensive use is the big teacher that's partly why I'm such a

519
00:28:52.750 --> 00:28:53.220
fan

520
00:28:53.220 --> 00:28:56.899
of GitHub Pong is because it basically forces you to insert

521
00:28:56.899 --> 00:29:00.100
continual ... Git interactions into your

522
00:29:00.100 --> 00:29:03.799
programming and pairing process and you know that there's nothing like

523
00:29:03.799 --> 00:29:06.950
continually using git in order to finally you know

524
00:29:06.950 --> 00:29:10.299
get ... the context of it. We haven't touched on branches ...

525
00:29:10.299 --> 00:29:13.679
there there there are some kind of issues like ... the way that

526
00:29:13.679 --> 00:29:17.070
branches are managed.  I ... took me a long time moving from

527
00:29:17.070 --> 00:29:20.710
other version control systems to kind of really fully understand

528
00:29:20.710 --> 00:29:24.179
those ... we'll talk more about it in the Git Immersion

529
00:29:24.179 --> 00:29:27.610
tool support. But there we go - that's it for version control for the moment.

